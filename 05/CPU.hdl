// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // Instruction decoding the control bits
    Mux16(a=false, b=instruction, sel=instruction[15], 
        out[0]=cJGT,
        out[1]=cJEQ,
        out[2]=cJLT,
        out[3]=writeM,
        out[4]=cRegD,
        out[5]=cRegA,
        out[6]=cno,
        out[7]=cf,
        out[8]=cny,
        out[9]=czy,
        out[10]=cnx,
        out[11]=czx,
        out[12]=cMux16MInput,
        out[15]=cType);
    
    Not(in=cType, out=notCType);
    Or(a=notCType, b=cRegA, out=loadA);
    
    Mux16(a=instruction, b=aluOut, sel=cType, out=mux16toAReg);
    Mux16(a=inM, b=aRegOut, sel=cMux16MInput, out=yIn);

    ARegister(in=aluOut, load=loadA, out=aRegOut, out[0..14]=addressM);
    DRegister(in=aluOut, load=cRegD, out=xIn);
    
    ALU(x=xIn, y=yIn, zx=czx, nx=cnx, zy=czy, ny=cny, 
        f=cf, no=cno, out=outM,
        out= aluOut, zr=czr, ng=cng);

    Not(in=czr, out=notzr);
    Not(in=cng, out=notng);
    And(a=notng, b=notzr, out=cpos);

    And(a=cJEQ, b=czr, out=JEQ);
    And(a=cJLT, b=cng, out=JLT);
    And(a=cJGT, b=cpos, out=JGT);
    
    Or(a=JEQ, b=JLT, out=JEQorJLT);
    Or(a=JEQorJLT, b=JGT, out=jump);

    PC(in=aRegOut, load=jump, inc=true, reset=reset, out[0..14]=pc, out[15]=false);



   


}